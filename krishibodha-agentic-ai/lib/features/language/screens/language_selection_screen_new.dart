import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:myapp/constants/app_colors.dart';
import 'package:myapp/features/language/providers/language_provider.dart';
import 'package:myapp/features/onboarding/providers/onboarding_provider.dart';
import 'package:myapp/providers/ai_voice_providers.dart';

class LanguageSelectionScreen extends ConsumerStatefulWidget {
  const LanguageSelectionScreen({super.key});

  @override
  ConsumerState<LanguageSelectionScreen> createState() =>
      _LanguageSelectionScreenState();
}

class _LanguageSelectionScreenState
    extends ConsumerState<LanguageSelectionScreen> {
  bool _hasGivenWelcome = false;

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _giveWelcomeMessage();
    });
  }

  Future<void> _giveWelcomeMessage() async {
    if (_hasGivenWelcome) return;

    try {
      // Initialize and give welcome
      await ref.read(serviceInitializationProvider.future);
      final aiService = ref.read(aiVoiceServiceProvider);
      await Future.delayed(const Duration(milliseconds: 1000));
      await aiService.speak(
        '‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§ï‡•É‡§∑‡§ø‡§¨‡•ã‡§ß‡§æ ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ö‡§™‡§®‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§ï‡§æ ‡§ö‡§Ø‡§® ‡§ï‡§∞‡•á‡§Ç‡•§',
      );
      _hasGivenWelcome = true;
    } catch (e) {
      debugPrint('Error giving welcome message: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    final selectedLanguage = ref.watch(languageProvider);

    return Scaffold(
      backgroundColor: Colors.white,
      body: SafeArea(
        child: Padding(
          padding: const EdgeInsets.all(24.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const SizedBox(height: 40),

              // App Logo/Icon
              Center(
                child: Container(
                  width: 120,
                  height: 120,
                  decoration: BoxDecoration(
                    color: AppColors.primary.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(60),
                  ),
                  child: ClipOval(
                    child: Image.asset(
                      'assets/images/KissanAvatar.png',
                      width: 80,
                      height: 80,
                      fit: BoxFit.cover,
                      errorBuilder: (context, error, stackTrace) {
                        return Icon(
                          Icons.agriculture,
                          size: 60,
                          color: AppColors.primary,
                        );
                      },
                    ),
                  ),
                ),
              ),

              const SizedBox(height: 48),

              // Heading Text
              const Text(
                'Choose Your Language',
                style: TextStyle(
                  fontSize: 24,
                  fontWeight: FontWeight.bold,
                  color: AppColors.textPrimary,
                ),
              ),
              const SizedBox(height: 8),
              const Text(
                '‡§Ö‡§™‡§®‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç',
                style: TextStyle(fontSize: 20, color: AppColors.textSecondary),
              ),
              const SizedBox(height: 48),

              // Language Options
              Expanded(
                child: ListView(
                  children: [
                    _buildLanguageOption(
                      context: context,
                      ref: ref,
                      languageCode: 'hi',
                      languageName: '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä',
                      englishName: 'Hindi',
                      flag: 'üáÆüá≥',
                      isSelected: selectedLanguage == 'hi',
                    ),
                    const SizedBox(height: 16),
                    _buildLanguageOption(
                      context: context,
                      ref: ref,
                      languageCode: 'en',
                      languageName: 'English',
                      englishName: 'English',
                      flag: 'üá∫üá∏',
                      isSelected: selectedLanguage == 'en',
                    ),
                    const SizedBox(height: 16),
                    _buildLanguageOption(
                      context: context,
                      ref: ref,
                      languageCode: 'mr',
                      languageName: '‡§Æ‡§∞‡§æ‡§†‡•Ä',
                      englishName: 'Marathi',
                      flag: 'üáÆüá≥',
                      isSelected: selectedLanguage == 'mr',
                    ),
                    const SizedBox(height: 16),
                    _buildLanguageOption(
                      context: context,
                      ref: ref,
                      languageCode: 'gu',
                      languageName: '‡™ó‡´Å‡™ú‡™∞‡™æ‡™§‡´Ä',
                      englishName: 'Gujarati',
                      flag: 'üáÆüá≥',
                      isSelected: selectedLanguage == 'gu',
                    ),
                    const SizedBox(height: 16),
                    _buildLanguageOption(
                      context: context,
                      ref: ref,
                      languageCode: 'te',
                      languageName: '‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å',
                      englishName: 'Telugu',
                      flag: 'üáÆüá≥',
                      isSelected: selectedLanguage == 'te',
                    ),
                    const SizedBox(height: 16),
                    _buildLanguageOption(
                      context: context,
                      ref: ref,
                      languageCode: 'ta',
                      languageName: '‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç',
                      englishName: 'Tamil',
                      flag: 'üáÆüá≥',
                      isSelected: selectedLanguage == 'ta',
                    ),
                    const SizedBox(height: 16),
                    _buildLanguageOption(
                      context: context,
                      ref: ref,
                      languageCode: 'bn',
                      languageName: '‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ',
                      englishName: 'Bengali',
                      flag: 'üáÆüá≥',
                      isSelected: selectedLanguage == 'bn',
                    ),
                    const SizedBox(height: 16),
                    _buildLanguageOption(
                      context: context,
                      ref: ref,
                      languageCode: 'pa',
                      languageName: '‡®™‡©∞‡®ú‡®æ‡®¨‡©Ä',
                      englishName: 'Punjabi',
                      flag: 'üáÆüá≥',
                      isSelected: selectedLanguage == 'pa',
                    ),
                  ],
                ),
              ),

              // Continue Button
              if (selectedLanguage != null) ...[
                const SizedBox(height: 24),
                SizedBox(
                  width: double.infinity,
                  child: ElevatedButton(
                    onPressed: () async {
                      // Voice confirmation
                      try {
                        final aiService = ref.read(aiVoiceServiceProvider);
                        await aiService.speak(
                          '‡§¨‡§π‡•Å‡§§ ‡§¨‡§¢‡§º‡§ø‡§Ø‡§æ! ‡§Ö‡§¨ ‡§π‡§Æ ‡§Ü‡§™‡§ï‡•Ä ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§ó‡§§ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§≤‡•á‡§Ç‡§ó‡•á‡•§',
                        );
                      } catch (e) {
                        debugPrint('Error speaking confirmation: $e');
                      }

                      ref
                          .read(onboardingProvider.notifier)
                          .completeLanguageSelection();
                    },
                    style: ElevatedButton.styleFrom(
                      backgroundColor: AppColors.primary,
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(vertical: 16),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                    child: const Text(
                      'Continue / ‡§ú‡§æ‡§∞‡•Ä ‡§∞‡§ñ‡•á‡§Ç',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                  ),
                ),
              ],
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildLanguageOption({
    required BuildContext context,
    required WidgetRef ref,
    required String languageCode,
    required String languageName,
    required String englishName,
    required String flag,
    required bool isSelected,
  }) {
    return GestureDetector(
      onTap: () async {
        ref.read(languageProvider.notifier).setLanguage(languageCode);

        // Voice feedback for language selection
        try {
          final aiService = ref.read(aiVoiceServiceProvider);
          String message = '';
          switch (languageCode) {
            case 'hi':
              message = '‡§Ü‡§™‡§®‡•á ‡§π‡§ø‡§®‡•ç‡§¶‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•Ä ‡§π‡•à‡•§';
              break;
            case 'en':
              message = 'You have selected English language.';
              break;
            case 'mr':
              message = '‡§§‡•Å‡§Æ‡•ç‡§π‡•Ä ‡§Æ‡§∞‡§æ‡§†‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§®‡§ø‡§µ‡§°‡§≤‡•Ä ‡§Ü‡§π‡•á.';
              break;
            case 'gu':
              message = '‡™§‡™Æ‡´á ‡™ó‡´Å‡™ú‡™∞‡™æ‡™§‡´Ä ‡™≠‡™æ‡™∑‡™æ ‡™™‡™∏‡™Ç‡™¶ ‡™ï‡™∞‡´Ä ‡™õ‡´á.';
              break;
            case 'te':
              message = '‡∞Æ‡±Ä‡∞∞‡±Å ‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å ‡∞≠‡∞æ‡∞∑‡∞®‡±Å ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±Å‡∞®‡±ç‡∞®‡∞æ‡∞∞‡±Å.';
              break;
            case 'ta':
              message = '‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ§‡ÆÆ‡Æø‡Æ¥‡Øç ‡ÆÆ‡Øä‡Æ¥‡Æø‡ÆØ‡Øà‡Æ§‡Øç ‡Æ§‡Øá‡Æ∞‡Øç‡Æ®‡Øç‡Æ§‡ØÜ‡Æü‡ØÅ‡Æ§‡Øç‡Æ§‡ØÅ‡Æ≥‡Øç‡Æ≥‡ØÄ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç.';
              break;
            case 'bn':
              message = '‡¶Ü‡¶™‡¶®‡¶ø ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§';
              break;
            case 'pa':
              message = '‡®§‡©Å‡®∏‡©Ä‡®Ç ‡®™‡©∞‡®ú‡®æ‡®¨‡©Ä ‡®≠‡®æ‡®∏‡®º‡®æ ‡®ö‡©Å‡®£‡©Ä ‡®π‡©à‡•§';
              break;
            default:
              message = 'Language selected.';
          }
          await aiService.speak(message);
        } catch (e) {
          debugPrint('Error speaking language selection: $e');
        }
      },
      child: Container(
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          color: isSelected ? AppColors.primary.withOpacity(0.1) : Colors.white,
          border: Border.all(
            color: isSelected ? AppColors.primary : Colors.grey.shade300,
            width: isSelected ? 2 : 1,
          ),
          borderRadius: BorderRadius.circular(12),
        ),
        child: Row(
          children: [
            Container(
              width: 50,
              height: 50,
              decoration: BoxDecoration(
                color: Colors.grey.shade100,
                borderRadius: BorderRadius.circular(25),
              ),
              child: Center(
                child: Text(flag, style: const TextStyle(fontSize: 24)),
              ),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    languageName,
                    style: TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.w600,
                      color:
                          isSelected
                              ? AppColors.primary
                              : AppColors.textPrimary,
                    ),
                  ),
                  Text(
                    englishName,
                    style: TextStyle(
                      fontSize: 14,
                      color:
                          isSelected
                              ? AppColors.primary.withOpacity(0.7)
                              : AppColors.textSecondary,
                    ),
                  ),
                ],
              ),
            ),
            if (isSelected)
              Icon(Icons.check_circle, color: AppColors.primary, size: 24),
          ],
        ),
      ),
    );
  }
}
